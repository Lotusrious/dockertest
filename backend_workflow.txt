# Travel Agent 백엔드 구현 워크플로우
-------------------------------------------------------------------------------

## 📋 프로세스/도구 운영(Jira · Swagger · GitHub)

### Jira (애자일)
- 워크플로우: Backlog → Selected for Dev → In Progress → In Review → QA/Verification → Done
- 스프린트: 1주 단위, 금요일 데모/회고
- WIP 제한: In Progress(개인≤2), In Review(팀≤5)
- 브랜치/커밋: feature/JIRA-123-short, fix/JIRA-234; 커밋 메시지 `JIRA-123: 요약`
- Smart Commit: `JIRA-123 #comment 내용 #time 1h #transition In Review`

### Swagger/OpenAPI
- 소스 오브 트루스: `docs/api/openapi.yml`
- 변경 시: PR에 스키마/샘플 요청·응답·에러 포함 → 머지 후 Swagger UI 검증
- 에러 응답: `ErrorResponse{code,message,details}` 일관 사용
- 페이지네이션: `size` 상한·`cursor`(keyset) 명시

### GitHub (Issue/PR)
- Issue 템플릿: 버그/기능 요청 사용, 수용 기준 명시
- PR 템플릿: 빌드/테스트 통과, OpenAPI 갱신, 예외 규격 체크, 롤백 계획
- CODEOWNERS: 모듈별 리뷰어 자동 지정, 리뷰 1인 이상 필수, 변경 라인 400↓

### 도메인 및 역할 소유권
**도메인 분배:**
- TL: AI Chat Domain (8 APIs) + 프로젝트 총괄
- BE-1: User Management (7 APIs) + Sharing Domain (2 APIs) + 인프라/배포 운영
- BE-2: Trip Planning Domain (8 APIs) + 프론트엔드 총괄
- BE-3: Review System (8 APIs) + Media Management Domain (2 APIs) + 문서관리
- BE-4: Recommendation (6 APIs) + Payment & Billing Domain (4 APIs) + QA/테스팅

**부차적 역할:**
- BE-1: 인프라/배포 운영(AWS ECR/ECS, CI/CD 파이프라인, 보안/시크릿 관리, 비용 모니터링)
- BE-2: 프론트엔드 총괄(React 프로젝트, 컴포넌트 라이브러리, 아키텍처, UI/UX 가이드)
- BE-3: 문서관리(Notion 위키, Swagger 문서, Jira 스프린트)
- BE-4: QA/테스팅(테스트 전략, E2E 테스트, 품질 게이트)

-------------------------------------------------------------------------------
## 📋 Phase 1: 유스케이스 정의 및 도메인 분석

### 1.1 핵심 액터 정의
**일반 사용자 (여행자)**
- UC-01: 회원가입 및 프로필 설정 (여행 스타일, 선호도, 프로필 사진)
- UC-02: 여행 계획 생성 (기간, 목적지, 제약사항 입력)
- UC-03: 사진 업로드 및 분석 (위치 추정, 포토스팟 추천)
- UC-04: AI 채팅 대화 (여행 질문, 추천 받기, 선호도 학습)
- UC-04-1: 대화 내용 실시간 분석 (선호도/관심사/예산패턴 추출)
- UC-04-2: 사용자 선호도 프로필 자동 업데이트 (학습 데이터 생성)
- UC-05: 일정 관리 (조회, 수정, 삭제)
- UC-06: 크레딧 구매 및 사용 내역 확인
- UC-07: 일정 공유 (링크/QR 생성)
- UC-08: 커뮤니티 참여 (지역 채팅)
- UC-16: 여행 후기 작성 (평점, 리뷰 텍스트, 사진, 장소별 평가)
- UC-17: 후기 조회 및 관리 (내 후기, 다른 사용자 후기 조회)
- UC-18: 개인화 여행 추천 (과거 이력 기반 맞춤 추천)
- UC-19: 추천 피드백 (추천 결과 평가, 학습 데이터 제공)

**시스템 액터**
- UC-09: 일정 감시 (날씨/변경사항 모니터링)
- UC-10: 자동 알림 발송 (이메일/웹푸시)
- UC-11: 캐시 관리 (응답 재활용)
- UC-12: 외부 API 호출 관리
- UC-20: 추천 모델 학습 (후기 데이터 + 채팅 선호도 기반 ML 모델 훈련)
- UC-21: 사용자 행동 패턴 분석 (클릭, 검색, 예약 패턴 수집)
- UC-24: 대화 선호도 데이터 수집 (채팅 분석 결과 자동 수집)
- UC-25: 실시간 선호도 프로필 업데이트 (대화 분석 → 학습 데이터 생성)

**관리자**
- UC-13: 사용자 관리 (조회, 정지, 크레딧 조정)
- UC-14: 시스템 모니터링 (API 사용량, 비용)
- UC-15: 감사 로그 조회
- UC-22: 후기 모더레이션 (부적절한 후기 관리)
- UC-23: 추천 시스템 성능 모니터링 (추천 정확도, A/B 테스트)

### 1.2 도메인 모델
```
User ──── UserProfile
  │         ├── photos[]
  │         └── UserPreference ──── PreferenceTag
  ├── ChatThread ──── AgentMessage
  ├── Trip ──── Schedule ──── Place
  │     │        └── TrendReview
  │     └── TripReview ──── ReviewRating
  │                   ├── ReviewPhoto
  │                   └── PlaceRating
  ├── PhotoAnalysis
  ├── CreditLedger
  ├── NotificationChannel
  ├── RecommendationHistory ──── RecommendationFeedback
  └── UserBehaviorLog ──── ClickEvent
                        ├── SearchEvent
                        └── BookingEvent
```

-------------------------------------------------------------------------------
## 🏗️ Phase 2: 백엔드 아키텍처 설계

### 2.1 기술 스택
- **백엔드**: Spring Boot 3.x + Java 17
- **프론트엔드**: React 18 + TypeScript
- **데이터베이스**: AWS RDS PostgreSQL 14+ (PostGIS 확장)
- **캐싱**: AWS ElastiCache (Redis)
- **큐**: AWS SQS 또는 Amazon MQ (RabbitMQ)
- **파일 저장**: AWS S3
- **컴퓨팅**: AWS EC2 (Auto Scaling Group)
- **로드밸런서**: AWS Application Load Balancer (ALB)
- **WebSocket**: Spring WebSocket + STOMP
- **API 문서**: SpringDoc OpenAPI 3.0 (Swagger)
- **빌드 도구**: Gradle (백엔드), Vite (프론트엔드)
- **ORM**: Spring Data JPA + Hibernate
- **컨테이너화**: Docker + Docker Compose (개발용)
- **컨테이너 레지스트리**: AWS ECR
- **CI/CD**: GitHub Actions (무료 2,000분/월)
- **코드 품질**: SonarQube, CheckStyle, SpotBugs
- **보안 스캔**: Snyk, OWASP Dependency Check
- **추천 시스템**: Apache Mahout 또는 Smile (Java ML 라이브러리)
- **데이터 분석**: Apache Commons Math, Weka (경량 ML)
- **실시간 처리**: Spring WebFlux (리액티브)

### 2.2 아키텍처 패턴
```
├── Presentation Layer (Controllers)
├── Application Layer (Services)
├── Domain Layer (Entities, Value Objects)
├── Infrastructure Layer (Repositories, External APIs)
└── Cross-Cutting Concerns (Auth, Logging, Caching)
```

### 2.3 AWS 아키텍처
```
Internet Gateway
    ↓
Application Load Balancer (ALB)
    ↓
EC2 Auto Scaling Group (Multi-AZ)
├── EC2 Instance 1 (Spring Boot App)
├── EC2 Instance 2 (Spring Boot App)
└── EC2 Instance N...
    ↓
AWS RDS PostgreSQL (Multi-AZ)
├── Primary Instance
└── Standby Instance (자동 페일오버)
    
ElastiCache Redis Cluster
├── Primary Node
└── Replica Nodes

S3 Bucket (사진/문서 저장)
└── CloudFront CDN (선택사항)

AWS SQS (비동기 작업 큐)
├── 사진 분석 큐
├── 알림 전송 큐
└── 일정 감시 큐
```

### 2.4 Docker 구성 (개발 환경)
```yaml
# docker-compose.yml
services:
  backend:
    build: ./backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres
      - redis
  
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
      
  postgres:
    image: postgis/postgis:14-3.2
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
      
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
```

### 2.4 핵심 패키지 구조
```
src/main/java/com/travelagent/
├── config/           # Spring 설정 (Security, WebSocket, Redis 등)
├── auth/            # JWT, OAuth2, Spring Security
├── user/            # 사용자 도메인
│   ├── controller/
│   ├── service/
│   ├── repository/
│   └── entity/
├── auth/            # JWT, OAuth2, Spring Security (BE-1)
├── user/            # 사용자 도메인 (BE-1)
│   ├── controller/
│   ├── service/
│   ├── repository/
│   └── entity/
├── sharing/         # 공유 도메인 (BE-1)
│   ├── controller/
│   ├── service/
│   └── entity/
├── chat/            # AI 채팅 도메인 (TL)
│   ├── controller/
│   ├── service/
│   ├── engine/      # AI 클라이언트, Mock 응답
│   ├── analyzer/    # 대화 분석, 선호도 추출, NLP 파싱
│   └── dto/
├── trip/            # 여행 계획 도메인 (BE-2)
│   ├── controller/
│   ├── service/
│   ├── repository/
│   └── entity/
├── review/          # 후기 도메인 (BE-3)
│   ├── controller/
│   ├── service/
│   ├── repository/
│   └── entity/
├── media/           # 미디어 도메인 (BE-3)
│   ├── controller/
│   ├── service/
│   └── entity/
├── recommendation/  # 추천 도메인 (BE-4)
│   ├── controller/
│   ├── service/
│   ├── repository/
│   ├── algorithm/   # ML 알고리즘 구현
│   └── entity/
├── billing/         # 결제/크레딧 도메인 (BE-4)
│   ├── controller/
│   ├── service/
│   ├── repository/
│   └── entity/
├── admin/           # 관리자 기능
├── common/          # 공통 유틸리티, 예외 처리
└── external/        # 외부 API 클라이언트 (Gemini, Maps 등)
```

-------------------------------------------------------------------------------
## 🔌 Phase 3: API 설계

### 3.1 RESTful 엔드포인트
```yaml
# BE-1: User Management Domain (7 APIs)
POST   /auth/register
POST   /auth/login
POST   /auth/refresh
POST   /auth/logout
GET    /users/profile
PUT    /users/profile
POST   /users/profile/photos

# BE-1: Sharing Domain (2 APIs)
POST   /share/tokens
GET    /share/{token}

# TL: AI Chat Domain (8 APIs)
GET    /chat/threads
POST   /chat/threads
GET    /chat/threads/{id}/messages
POST   /chat/threads/{id}/messages
POST   /chat/threads/{id}/analyze-photo
POST   /chat/analyze-preferences/{threadId}  # 대화 내용 선호도 분석
GET    /chat/preferences/learning-data       # 추천 모델용 학습 데이터
POST   /chat/generate-trip-from-chat         # AI 채팅 → 여행 계획

# BE-2: Trip Planning Domain (8 APIs)
GET    /trips
POST   /trips
GET    /trips/{id}
PUT    /trips/{id}
DELETE /trips/{id}
POST   /trips/{id}/schedules
PUT    /trips/{id}/schedules/{scheduleId}
POST   /trips/{id}/complete                  # 여행 완료 처리

# BE-3: Review System Domain (8 APIs)
GET    /reviews
POST   /reviews
GET    /reviews/{id}
PUT    /reviews/{id}
DELETE /reviews/{id}
GET    /reviews/trip/{tripId}
GET    /reviews/user/{userId}
POST   /reviews/{id}/moderate

# BE-3: Media Management Domain (2 APIs)
POST   /photos/analyze
GET    /photos/analysis/{id}

# BE-4: Recommendation Domain (6 APIs)
GET    /recommendations/destinations
GET    /recommendations/activities/{userId}
POST   /recommendations/feedback
GET    /recommendations/history/{userId}
GET    /recommendations/similar-users/{userId}
POST   /recommendations/train-model

# BE-4: Payment & Billing Domain (4 APIs)
GET    /billing/credits
POST   /billing/orders
POST   /billing/webhooks/kakaopay
GET    /billing/history

# WebSocket
WS     /ws (namespace: /chat, /notifications)
```

-------------------------------------------------------------------------------
## 💾 Phase 4: 데이터베이스 상세 설계

### 4.1 핵심 테이블 DDL
```sql
-- 사용자
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  role VARCHAR(50) DEFAULT user,
  credits INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 여행 계획
CREATE TABLE trips (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  thread_id UUID,
  title VARCHAR(255) NOT NULL,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  destination VARCHAR(255),
  ai_summary TEXT,
  ai_tags JSONB,
  watch_enabled BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_trips_user_dates (user_id, start_date, end_date)
);

-- 일정
CREATE TABLE schedules (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  trip_id UUID REFERENCES trips(id) ON DELETE CASCADE,
  day INTEGER NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  place_id UUID REFERENCES places(id),
  activity TEXT,
  tags JSONB,
  weather_risk VARCHAR(50),
  INDEX idx_schedules_trip_day (trip_id, day, start_time)
);

-- 장소 (PostGIS 활용)
CREATE TABLE places (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  location GEOGRAPHY(POINT, 4326),
  category VARCHAR(100),
  meta_json JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_places_location USING GIST(location),
  INDEX idx_places_category (category)
);

-- 여행 후기
CREATE TABLE trip_reviews (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  trip_id UUID REFERENCES trips(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id),
  rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
  title VARCHAR(255) NOT NULL,
  content TEXT,
  photos JSONB, -- 후기 사진 URL 배열
  tags JSONB, -- 태그 배열
  place_ratings JSONB, -- 장소별 평점 {place_id: rating}
  is_public BOOLEAN DEFAULT true,
  moderation_status VARCHAR(50) DEFAULT 'pending', -- pending, approved, rejected
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_trip_reviews_trip_id (trip_id),
  INDEX idx_trip_reviews_user_id (user_id, created_at DESC),
  INDEX idx_trip_reviews_rating (rating, created_at DESC),
  INDEX idx_trip_reviews_public (is_public, moderation_status, created_at DESC)
);

-- 사용자 선호도 프로필
CREATE TABLE user_preferences (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) UNIQUE,
  travel_style JSONB, -- {"adventure": 0.8, "culture": 0.6, "food": 0.9}
  preferred_activities JSONB, -- 선호 활동 태그와 가중치
  budget_preference VARCHAR(50), -- budget, mid-range, luxury
  group_size_preference INTEGER, -- 선호 그룹 크기
  travel_pace VARCHAR(50), -- slow, moderate, fast
  updated_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_user_preferences_user_id (user_id)
);

-- 추천 이력
CREATE TABLE recommendation_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  recommendation_type VARCHAR(50) NOT NULL, -- destination, activity, place
  recommended_item_id UUID, -- place_id 또는 다른 참조
  recommended_data JSONB, -- 추천된 데이터 스냅샷
  relevance_score DECIMAL(3,2), -- 0.00-1.00
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_recommendation_history_user_id (user_id, created_at DESC),
  INDEX idx_recommendation_history_type (recommendation_type, created_at DESC)
);

-- 추천 피드백
CREATE TABLE recommendation_feedback (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  recommendation_id UUID REFERENCES recommendation_history(id),
  user_id UUID REFERENCES users(id),
  feedback_type VARCHAR(50) NOT NULL, -- liked, disliked, clicked, booked
  feedback_value DECIMAL(3,2), -- 피드백 강도 (0.00-1.00)
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_recommendation_feedback_recommendation_id (recommendation_id),
  INDEX idx_recommendation_feedback_user_id (user_id, created_at DESC),
  INDEX idx_recommendation_feedback_type (feedback_type, created_at DESC)
);

-- 사용자 행동 로그
CREATE TABLE user_behavior_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  event_type VARCHAR(50) NOT NULL, -- click, search, view, book
  entity_type VARCHAR(50), -- trip, place, review, recommendation
  entity_id UUID,
  event_data JSONB, -- 추가 컨텍스트 데이터
  session_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_user_behavior_logs_user_id (user_id, created_at DESC),
  INDEX idx_user_behavior_logs_event_type (event_type, created_at DESC),
  INDEX idx_user_behavior_logs_entity (entity_type, entity_id)
);
```

-------------------------------------------------------------------------------
## 📅 Phase 5: 주차별 구현 계획

### 주차 1: 기초 인프라 구축 + CI/CD 기반 구축
**월요일-화요일**
- [ ] Spring Boot 프로젝트 초기화 (Spring Initializr)
- [ ] GitHub Repository 생성 및 브랜치 전략 설정
- [ ] GitHub Actions 기본 워크플로우 구성 (.github/workflows/ci-cd.yml)
- [ ] Dockerfile 작성 (멀티스테이지 빌드)
- [ ] Docker Compose 설정 (PostgreSQL, Redis, RabbitMQ)
- [ ] application.yml 환경 설정 (profiles: dev, docker, prod)
- [ ] Logback 로깅 시스템 구축

**수요일-목요일**
- [ ] JPA Entity 및 Repository 구현
- [ ] Spring Security + JWT 인증 시스템
- [ ] 사용자 CRUD REST API
- [ ] SpringDoc OpenAPI (Swagger) 설정
- [ ] CI/CD 파이프라인 첫 실행 및 검증

**금요일**
- [ ] JUnit 5 + Mockito 테스트 환경 구축
- [ ] GitHub Actions 자동 테스트 실행 설정
- [ ] 코드 품질 검사 도구 통합 (CheckStyle, SpotBugs)

### 주차 2-3: 핵심 비즈니스 로직 + CI/CD 강화
**Week 2**
- [ ] RestTemplate/WebClient로 Gemini/GPT API 클라이언트 구현
- [ ] 프롬프트 템플릿 시스템 (Thymeleaf 템플릿 활용)
- [ ] 채팅 스레드 관리 REST API
- [ ] **대화 분석 엔진 구축**: 선호도/관심사/예산패턴 실시간 추출 로직
- [ ] **선호도 학습 파이프라인**: 분석 결과 → user_preferences 자동 업데이트
- [ ] @Async를 활용한 AI 메시지 비동기 처리
- [ ] Spring Cache + Redis 응답 캐싱 전략
- [ ] SonarQube 코드 품질 분석 통합
- [ ] 자동화된 보안 스캔 (Snyk, OWASP) 설정

**Week 3**
- [ ] 여행 계획 생성 서비스 로직
- [ ] **AI 채팅 → 여행계획 생성 연동**: 대화 분석 결과 기반 자동 여행계획 생성
- [ ] 사진 분석 파이프라인 (Apache Tika EXIF, Vision API)
- [ ] PostGIS + JPA Spatial 장소 검색/저장
- [ ] 외부 API 통합 (Kakao Maps, 기상청 API)
- [ ] **여행 후기 시스템 기반 구축**: 후기 CRUD, 평점 시스템, 모더레이션
- [ ] **후기-여행 데이터 연동**: 여행 완료 상태 API, 후기 작성 권한 검증
- [ ] Resilience4j Circuit Breaker 구현
- [ ] 스테이징 환경 자동 배포 파이프라인 구축

### 주차 4: 고급 기능 + Docker 통합
**월요일-수요일**
- [ ] Spring Scheduler (@Scheduled) 일정 감시
- [ ] JavaMailSender + WebPush 알림 시스템
- [ ] Spring WebSocket + STOMP 실시간 채팅
- [ ] Docker 이미지 자동 빌드 및 레지스트리 푸시

**목요일-금요일**
- [ ] UUID 기반 공유 토큰 시스템
- [ ] 크레딧/결제 시스템 (Mock KakaoPay Webhook)
- [ ] **추천 시스템 기반 준비**: ML 라이브러리 통합, 학습 데이터 수집 로직
- [ ] **추천 엔진 프로토타입**: 사용자 선호도 분석, 기본 추천 알고리즘
- [ ] Spring Security 권한 기반 관리자 API
- [ ] 컨테이너 보안 스캔 및 취약점 검사

### 주차 5-6: 최적화 및 AWS 배포 + CI/CD 완성
**Week 5**
- [ ] AWS 계정 및 VPC 설정
- [ ] RDS PostgreSQL 인스턴스 생성 및 설정
- [ ] ElastiCache Redis 클러스터 구성
- [ ] S3 버킷 생성 및 정책 설정
- [ ] **개인화 추천 시스템 완성**: 채팅 선호도 + 후기 데이터 기반 추천 모델 학습
- [ ] **실시간 데이터 파이프라인**: 채팅분석→선호도→추천 학습 데이터 동기화
- [ ] EC2 인스턴스 템플릿 작성
- [ ] Application Load Balancer 구성
- [ ] 프로덕션 배포 파이프라인 구축 (Blue-Green 배포)

**Week 6**
- [ ] Auto Scaling Group 설정
- [ ] CloudWatch 모니터링 대시보드 구성
- [ ] GitHub Actions과 AWS CodeDeploy 통합
- [ ] **추천 시스템 성능 최적화**: 추천 정확도 검증, A/B 테스트 준비
- [ ] **후기↔추천 파이프라인 완성**: 피드백 루프, 실시간 학습 모델 업데이트
- [ ] Spring Boot 애플리케이션 AWS 프로파일 설정
- [ ] 보안 그룹 및 IAM 역할 최적화
- [ ] 자동 롤백 시스템 구축 및 테스트
- [ ] CI/CD 운영 매뉴얼 및 모니터링 알람 설정
- [ ] **추천 시스템 운영 가이드 및 성능 모니터링 대시보드** 작성
- [ ] 프로덕션 배포 및 운영 문서 작성

-------------------------------------------------------------------------------
## ⚠️ Phase 6: 위험 관리

### 6.1 기술적 위험
| 위험 | 영향도 | 완화 전략 |
|------|--------|-----------|
| AI API 비용 폭증 | 높음 | - 토큰 제한 (256-512)<br>- 캐싱 전략<br>- 승격 제한 (1회) |
| 외부 API 장애 | 중간 | - Circuit Breaker<br>- Fallback 전략<br>- 다중 제공자 |
| DB 성능 저하 | 높음 | - 인덱싱 최적화<br>- 읽기 전용 복제본<br>- 캐싱 레이어 |

### 6.2 비즈니스 위험
| 위험 | 영향도 | 완화 전략 |
|------|--------|-----------|
| 크레딧 악용 | 높음 | - Rate Limiting<br>- 이상 탐지<br>- 감사 로그 |
| 개인정보 유출 | 매우 높음 | - 암호화 (at rest/in transit)<br>- 최소 수집 원칙<br>- GDPR 준수 |

-------------------------------------------------------------------------------
## 🧪 Phase 7: 테스트 전략

### 7.1 테스트 레벨
- **단위 테스트**: JUnit 5 + Mockito (80% 커버리지 목표)
- **통합 테스트**: @SpringBootTest + MockMvc (API 엔드포인트)
- **E2E 테스트**: RestAssured (핵심 사용자 시나리오)
- **부하 테스트**: JMeter 또는 Gatling (동시 사용자 1000명 목표)

### 7.2 테스트 자동화
```yaml
# GitHub Actions CI/CD Pipeline (.github/workflows/ci-cd.yml)
name: Travel Agent CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Run Tests
      run: |
        ./gradlew clean
        ./gradlew checkstyleMain
        ./gradlew test
        ./gradlew integrationTest
    
    - name: SonarQube Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew sonarqube
    
    - name: Security Scan
      run: |
        ./gradlew dependencyCheckAnalyze
        docker run --rm -v "$PWD:/app" snyk/snyk:linux test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Build Application
      run: ./gradlew build -x test
    
    - name: Build Docker Image
      run: |
        docker build -t travel-agent-api:${{ github.sha }} .
        docker tag travel-agent-api:${{ github.sha }} travel-agent-api:latest
    
    - name: Security Scan Docker Image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:latest \
          image travel-agent-api:latest
    
    - name: Push to ECR
      env:
        AWS_REGION: ap-northeast-2
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        
        docker tag travel-agent-api:latest \
          $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/travel-agent:${{ github.sha }}
        
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/travel-agent:${{ github.sha }}
    
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster travel-production \
          --service travel-api \
          --force-new-deployment
```

-------------------------------------------------------------------------------
## 🚀 Phase 8: CI/CD 파이프라인 및 배포 전략

### 8.1 환경 구성
- **개발**: Docker Compose 로컬 환경
  - 모든 서비스 컨테이너화
  - 핫 리로드 지원 (Spring DevTools, React Hot Module Replacement)
  
- **스테이징**: AWS EC2 + RDS (단일 인스턴스)
  - t3.medium EC2 인스턴스
  - RDS PostgreSQL (db.t3.small)
  - ElastiCache Redis (cache.t3.micro)
  
- **프로덕션**: AWS EC2 Auto Scaling + RDS Multi-AZ
  - EC2 Auto Scaling Group (t3.large × 2-4)
  - Application Load Balancer
  - RDS PostgreSQL Multi-AZ (db.m5.large)
  - ElastiCache Redis Cluster
  - CloudWatch 모니터링
  - Blue-Green 배포 (AWS CodeDeploy)

### 8.2 CI/CD 파이프라인 상세 구성

**브랜치 전략과 CI/CD 연동**
```
main branch    → Production 배포 (수동 승인)
develop branch → Staging 자동 배포
feature/*      → PR 시 테스트만 실행
hotfix/*       → Production 긴급 배포
```

**파이프라인 단계별 구성**
1. **코드 검증 단계**
   - CheckStyle, SpotBugs 정적 분석
   - SonarQube 품질 게이트
   - 보안 취약점 스캔 (Snyk, OWASP)

2. **테스트 단계**
   - 단위 테스트 (JUnit 5)
   - 통합 테스트 (TestContainers)
   - API 테스트 (RestAssured)

3. **빌드 및 패키징**
   - Gradle 빌드 최적화
   - Docker 멀티스테이지 빌드
   - 컨테이너 보안 스캔 (Trivy)

4. **배포 단계**
   - ECR 이미지 푸시
   - ECS 서비스 업데이트
   - 헬스체크 검증
   - 롤백 자동화

**배포 승인 워크플로우**
- Staging: 자동 배포 (develop 브랜치)
- Production: 수동 승인 + Blue-Green 배포
- 롤백: 이전 버전으로 즉시 복원

### 8.3 모니터링 및 알림
- **APM**: Spring Boot Actuator + Micrometer
- **로그**: Logback + ELK Stack (Elasticsearch, Logstash, Kibana)
- **메트릭**: Prometheus + Grafana
- **알림**: Spring Boot Admin + Slack/Email
- **헬스체크**: /actuator/health 엔드포인트
- **CI/CD 모니터링**: GitHub Actions 실행 상태, 배포 성공/실패 알림

-------------------------------------------------------------------------------
## ☁️ AWS 인프라 구성

### EC2 설정
```yaml
# EC2 Launch Template
인스턴스 타입: t3.large
AMI: Amazon Linux 2023
보안 그룹:
  - SSH (22): 관리자 IP만
  - HTTP (80): ALB에서만
  - HTTPS (443): ALB에서만
  - App Port (8080): ALB에서만
IAM Role:
  - S3 읽기/쓰기
  - RDS 접근
  - CloudWatch 로그
  - Secrets Manager 읽기
```

### RDS 설정
```yaml
엔진: PostgreSQL 14 + PostGIS
인스턴스: db.m5.large
스토리지: 100GB SSD (gp3)
Multi-AZ: 활성화
백업: 자동 백업 7일 보관
암호화: KMS 암호화 활성화
파라미터 그룹:
  - max_connections: 200
  - shared_buffers: 256MB
  - effective_cache_size: 1GB
```

### ElastiCache 설정
```yaml
엔진: Redis 7
노드 타입: cache.t3.medium
클러스터 모드: 활성화
복제본: 2개 (다중 AZ)
자동 페일오버: 활성화
백업: 일일 스냅샷
```

### Application Load Balancer
```yaml
리스너:
  - HTTP (80) → HTTPS 리다이렉트
  - HTTPS (443) → Target Group
헬스체크:
  - 경로: /actuator/health
  - 간격: 30초
  - 임계값: 2회 실패
스티키 세션: 활성화 (WebSocket용)
```

### Auto Scaling 정책
```yaml
최소 인스턴스: 2
최대 인스턴스: 6
대상 추적:
  - CPU 사용률 > 70%
  - 요청 수 > 1000/분
스케일 아웃: 1분 대기
스케일 인: 5분 대기
```

-------------------------------------------------------------------------------
## �� Docker 구성 상세

### Dockerfile (Spring Boot)
```dockerfile
# 멀티스테이지 빌드
FROM gradle:7.6-jdk17 AS build
WORKDIR /app
COPY build.gradle settings.gradle ./
COPY src ./src
RUN gradle build -x test

FROM openjdk:17-slim
WORKDIR /app
COPY --from=build /app/build/libs/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]
```

### Dockerfile (React)
```dockerfile
FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
EXPOSE 80
```

### Docker 네트워크 구성
- **travel-network**: 모든 서비스가 연결되는 브리지 네트워크
- **내부 통신**: 서비스명으로 통신 (backend:8080, postgres:5432)
- **볼륨 마운트**: 데이터 영속성 보장

-------------------------------------------------------------------------------
## 📊 성공 지표

### 기술 지표
- API 응답시간 < 200ms (p95)
- 가용성 > 99.9%
- AI API 비용 < 예산의 80%

### 비즈니스 지표
- 일일 활성 사용자 > 1000명
- 평균 세션 시간 > 10분
- 크레딧 전환율 > 5%

---
이 워크플로우를 따라 백엔드를 우선 구현하고, 이후 프론트엔드 연동 시 안정적인 API 기반을 제공할 수 있습니다.
