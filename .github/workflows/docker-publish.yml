name: Docker Build and Publish

# 트리거 조건
on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # 수동 실행 가능

env:
  # Docker Hub 설정
  REGISTRY: docker.io
  DOCKER_USERNAME: lotusrious  # 실제 Docker Hub 사용자명
  IMAGE_NAME: travel-agent-backend
  
  # AWS ECR 사용 시 (주석 해제하여 사용)
  # AWS_REGION: ap-northeast-2
  # ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  
jobs:
  # Docker 이미지 빌드 및 게시 (테스트 모드 - Spring Boot 없이)
  docker:
    name: Build and Push Docker Image (Test Mode)
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      id-token: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # GitHub Container Registry 사용 시
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # AWS ECR 로그인 (필요시 주석 해제)
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}
      #     
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
            
  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  # AWS ECS 배포 (필요시 주석 해제)
  # deploy-ecs:
  #   name: Deploy to ECS
  #   runs-on: ubuntu-latest
  #   needs: [docker, security-scan]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         
  #     - name: Download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition travel-agent-task \
  #           --query taskDefinition > task-definition.json
  #           
  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: travel-agent-container
  #         image: ${{ env.ECR_REGISTRY }}/travel-agent:${{ github.sha }}
  #         
  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: travel-agent-service
  #         cluster: travel-production
  #         wait-for-service-stability: true
          
  # Kubernetes 배포 (필요시 주석 해제)
  # deploy-k8s:
  #   name: Deploy to Kubernetes
  #   runs-on: ubuntu-latest
  #   needs: [docker, security-scan]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Set up Kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'
  #         
  #     - name: Configure kubectl
  #       run: |
  #         echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
  #         export KUBECONFIG=kubeconfig
  #         
  #     - name: Deploy to Kubernetes
  #       run: |
  #         kubectl set image deployment/travel-agent \
  #           travel-agent=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
  #           -n production
  #         kubectl rollout status deployment/travel-agent -n production
          
  # 테스트 완료 알림 (현재는 비활성화)
  # notification:
  #   name: Send Notification
  #   runs-on: ubuntu-latest
  #   needs: [docker, security-scan]
  #   if: always()
  #   
  #   steps:
  #     - name: Print Success Message
  #       run: |
  #         echo "🎉 Docker Build and Push completed!"
  #         echo "Repository: ${{ github.repository }}"
  #         echo "Branch: ${{ github.ref }}"
  #         echo "Commit: ${{ github.sha }}"
  #         echo "Author: ${{ github.actor }}"