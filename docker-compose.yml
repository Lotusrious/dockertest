version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:14-3.2-alpine
    container_name: travel-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: travelagent
      POSTGRES_USER: ${DB_USER:-traveluser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-travelpass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-traveluser} -d travelagent"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - travel-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: travel-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - travel-network

  # RabbitMQ Message Queue (Optional)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: travel-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbit}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitpass}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - travel-network

  # Spring Boot Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: travel-agent-backend:latest
    container_name: travel-backend
    restart: unless-stopped
    environment:
      # Spring profiles
      SPRING_PROFILES_ACTIVE: docker
      
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/travelagent
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-traveluser}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-travelpass}
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
      
      # RabbitMQ configuration (if using)
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-rabbit}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitpass}
      
      # JVM options
      JAVA_OPTS: >-
        -Xmx1024m
        -Xms512m
        -XX:+UseG1GC
        -Djava.security.egd=file:/dev/./urandom
      
      # Application specific
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      KAKAO_API_KEY: ${KAKAO_API_KEY}
      
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - travel-network

  # React Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: travel-agent-frontend:dev
    container_name: travel-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8080
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true
    networks:
      - travel-network

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: travel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - travel-network
    profiles:
      - production

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: travel-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - travel-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: travel-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - travel-network
    profiles:
      - monitoring

# Networks
networks:
  travel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local