Travel Agent 백엔드 로드맵 (초보자용, 5인 팀)

목표
- 6주 안에 MVP 백엔드를 완성하여 프론트엔드 연동 가능한 상태로 만든다.
- 비용과 복잡도를 최소화하고, 모듈화와 일관된 코드 스타일을 유지한다.
- 실패/에러 포인트를 사전에 정의하고 방어 코드를 습관화한다.

팀 구성 및 기능별 역할 분담(5인)

**TL(팀장, 당신)**: AI Chat Domain 전담 + 프로젝트 총괄
- 주담당: **AI Chat Domain (8 APIs)**
  - **채팅 엔진**: LLM API 호출, 대화 컨텍스트 관리, 입출력 DB 저장
  - **대화 분석**: 여행 선호도/관심사/예산 패턴/동행인 정보 추출 및 파싱
  - **학습 데이터 생성**: 분석된 선호도 → user_preferences 저장, 개인화 추천 기반 데이터 제공
- 부담당: 프로젝트 총괄, CI/CD 관리, 아키텍처 설계, 코드리뷰
- API: `/chat/threads`, `/chat/threads/{id}/messages`, `/chat/analyze-preferences`, `/chat/generate-trip-from-chat`
- 협업: BE-2와 AI→여행계획 생성 연동, BE-4와 선호도→추천 학습 데이터 파이프라인 ⚠️

**BE-1 (사용자/공유)**: User Management + Sharing Domain + **인프라/배포 운영**
- 주담당: **User Management Domain (7 APIs)** - 회원가입, 로그인, JWT 토큰 관리, 사용자 프로필
- 부담당: **Sharing Domain (2 APIs)** + 인프라/배포 운영
  - AWS 배포·인프라 운영(ECR/ECS 또는 EC2+ALB), CI/CD 파이프라인 운영·모니터링
  - 보안·시크릿 관리(Secrets Manager/KMS), 비용·사용량 모니터링, 릴리즈/버전 관리
  - 여행 공유 토큰 생성/관리, 공유 권한 제어
- API: `/auth/login`, `/auth/register`, `/users/profile`, `/share/tokens`, `/share/{token}`
- 협업: 모든 팀원에게 인증 기반 서비스 제공, BE-2와 여행 공유 연동 ⚠️

**BE-2 (여행계획)**: Trip Planning Domain 전담 + **프론트엔드 총괄**
- 주담당: **Trip Planning Domain (8 APIs)** - 여행 계획 CRUD, 일정 관리, 날짜 검증, 장소 관리
- 부담당: **프론트엔드 총괄**
  - React 프로젝트 초기 설정, 컴포넌트 라이브러리 선정, 프론트엔드 아키텍처 설계
  - UI/UX 가이드라인 수립, 프론트엔드-백엔드 API 연동 관리
- API: `/trips`, `/trips/{id}`, `/trips/{id}/schedules`, `/trips/{id}/complete`, `/places/*`
- 협업: TL과 AI→여행계획 생성 로직, BE-3과 여행 완료 상태 연동, BE-4와 추천용 여행 이력 제공 ⚠️

**BE-3 (후기/미디어)**: Review System + Media Management Domain + **문서관리**
- 주담당: **Review System Domain (8 APIs)** - 여행 후기 작성/조회, 평점 시스템, 모더레이션
- 부담당: **Media Management Domain (2 APIs)** + 문서관리
  - 사진 업로드/분석, 파일 관리, 미디어 메타데이터 처리
  - Notion 위키 관리, Swagger API 문서 통합, Jira 스프린트 관리
- API: `/reviews/*`, `/reviews/{id}/moderate`, `/photos/analyze`, `/photos/analysis/{id}`
- 협업: BE-2와 여행 완료 상태 연동, BE-4와 후기→추천 데이터 파이프라인, 미디어-여행/후기 연결 ⚠️

**BE-4 (추천/결제)**: Recommendation + Payment & Billing Domain + **QA/테스팅**
- 주담당: **Recommendation Domain (6 APIs)** - 개인화 추천 엔진, ML 알고리즘, 학습 파이프라인
- 부담당: **Payment & Billing Domain (4 APIs)** + QA/테스팅
  - 크레딧 관리, 결제 연동, 웹훅 처리, 거래 이력 관리
  - 테스트 전략 수립, E2E 테스트 관리, 품질 게이트 운영, 버그 트래킹
- API: `/recommendations/*`, `/recommendations/feedback`, `/billing/credits`, `/billing/orders`, `/billing/webhooks`
- 협업: TL(선호도 데이터), BE-2(여행 이력), BE-3(후기 데이터) 수집하여 추천 학습 ⚠️

리포지토리/브랜치 전략
- trunk-based + 짧은 feature 브랜치: feature/auth-register, feature/trip-crud 등
- PR는 200~400라인 내외 유지, 스쿼시 머지 권장
- 네이밍: feature/, fix/, chore/, docs/, refactor/
- 필수 체크: 빌드 통과, Swagger 스키마 변경 반영, API 응답/예외 표준 준수, 마이그레이션 리뷰

코딩 규칙(요약)
- 패키지: com.travelagent.{module} (controller/service/repository/entity/dto)
- 스타일: camelCase, DTO 입출력 분리, 엔티티는 JPA 어노테이션만 최소 부착
- 예외: GlobalExceptionHandler로 표준 에러 응답 {code, message, details}
- 페이지네이션: size 최대치 제한, 정렬 필드 화이트리스트
- 검증: @Valid + Bean Validation, 날짜/시간/소유권 필수 검증

용어 사전(초보자용)
- 액터(Actor): 시스템과 상호작용하는 주체. 사람(사용자/관리자) 또는 외부 시스템.
- 유스케이스(Use Case): 액터가 시스템을 통해 달성하려는 목표 단위 시나리오.
- 엔티티(Entity): DB에 저장되는 도메인 객체(users, trips 등).
- ERD(Entity-Relationship Diagram): 엔티티 간 관계를 그린 다이어그램.
- DTO(Data Transfer Object): API 입출력 전용 데이터 모델(엔티티와 분리).
- 컨트롤러(Controller): HTTP 요청 수신/응답 반환. 비즈니스 로직은 서비스로 위임.
- 서비스(Service): 유스케이스 구현(검증/권한/트랜잭션/도메인 로직).
- 레포지토리(Repository): DB 접근 계층(JPA 인터페이스).
- 엔드포인트(Endpoint): API 경로와 메서드 조합(예: POST /auth/login).
- DoD(Definition of Done): 작업 완료 기준. 테스트/문서/검증 포함.
- Mock/Stub: 외부 의존성 대체 가짜 구현. Mock(행동 검증), Stub(고정 응답).
- 캐시/TTL: 응답 재사용/만료 시간(Time-To-Live).
- 멱등성(Idempotency): 같은 요청을 여러 번 보내도 결과가 동일한 성질.
- 페이지네이션(Pagination): 결과 나눠서 전달. keyset/cursor 방식을 권장.
- JWT: 서명된 토큰. AccessToken(짧음), RefreshToken(재발급용, 길음).
- CI/CD: 지속적 통합/배포. 코드 변경 시 자동 빌드/테스트/배포.
- GitHub Actions: GitHub 통합 CI/CD 서비스. 워크플로우 YAML로 정의.
- Pipeline: 빌드→테스트→배포 단계별 자동화 프로세스.
- 개인화 추천(Personalized Recommendation): 사용자 과거 데이터 기반 맞춤 추천.
- 협업 필터링(Collaborative Filtering): 유사한 사용자 행동 패턴 기반 추천 기법.
- 머신러닝(Machine Learning): 데이터에서 패턴을 학습하여 예측/분류하는 기술.
- Swagger/OpenAPI: API 명세 표준 및 문서 자동화 도구.
- Circuit Breaker: 외부 장애 시 빠르게 차단/복구를 제어하는 패턴.
- Rate Limiting: 단위 시간당 허용 요청 수 제한.
- Webhook: 외부 시스템이 우리 API로 이벤트를 푸시하는 방식(서명 검증 필요).
- 인증(Authentication)/인가(Authorization): 신원 확인/권한 확인.
- 환경변수/시크릿: 키/비밀번호 등 민감정보를 코드 밖에서 주입.
- 프로파일(Profile): dev/docker/prod 등 환경별 설정 분리.
- Actuator/APM: 헬스체크/메트릭/모니터링 도구.

유스케이스 작성 방법(템플릿)
- ID: UC-XX (예: UC-01)
- 액터: 사용자/시스템/관리자 등
- 목적: 사용자가 얻고자 하는 가치(한 줄)
- 사전조건: 인증/데이터 존재 등
- 기본 흐름(번호): 1→2→3
- 대안 흐름: 분기 상황(선택)
- 예외/실패: 유효성 위반, 권한, 한도 초과 등
- 데이터/엔티티: 관련 테이블/필드
- API 매핑: REST 엔드포인트 목록
- 성공 기준(DoD): 관찰 가능한 완료 조건(응답/DB 상태/로그)

유스케이스 예시(간단)
- ID: UC-01 회원가입/로그인
- 액터: 일반 사용자
- 목적: 계정을 생성하고 로그인 토큰을 발급받는다.
- 사전조건: 이메일 미사용, 비밀번호 정책 충족
- 기본 흐름: 1) POST /auth/register → 2) POST /auth/login → 3) JWT 수신
- 예외: 409 이메일 중복, 400 패스워드 규칙 위반
- 데이터: users(email, password_hash, role, created_at)
- API: POST /auth/register, POST /auth/login, POST /auth/refresh, POST /auth/logout
- 성공 기준: 회원가입/로그인 응답 200, DB users 1행 생성, JWT 검증 통과

주차별 순차 개발 계획(Definition of Done 포함)

Week 1: 프로젝트 뼈대 + Auth + CI/CD 기반
- 범위
  - Spring Boot 3 + Java 17 초기화, Gradle, 멀티 프로파일(dev, docker)
  - GitHub Actions 워크플로우 기본 설정 (.github/workflows/ci-cd.yml)
  - Swagger(OpenAPI) 기본 설정, CORS, 로깅(Logback) 기본
  - Auth: POST /auth/register, POST /auth/login (BCrypt, JWT)
  - User: GET/PUT /users/profile 최소 스키마(JSON)
- DoD
  - GitHub Actions 파이프라인 첫 실행 성공 (빌드→테스트→린트 통과)
  - Swagger에서 4개 엔드포인트 호출 성공, JWT 필터 동작, 예외 표준화 응답 적용
  - Docker Compose로 Postgres 구동 및 로컬 연결 확인
- 리스크/방어
  - 이메일 중복 409, 비밀번호 정책(길이/문자종류) 검증, JWT 만료/재발급 대비

Week 2: Trip CRUD + 공통 예외/응답 표준 + CI/CD 강화
- 범위
  - Trip: GET/POST /trips, GET/PUT/DELETE /trips/{id}
  - Schedule: POST /trips/{id}/schedules (겹침/시간 검증 최소)
  - 공통: GlobalExceptionHandler, 공통 응답 래퍼, 페이지네이션 정책
  - CI/CD: 자동 테스트 실행, 코드 품질 검사 (SonarQube/CheckStyle)
- DoD
  - 본인 소유 Trip만 접근, 날짜 역전 차단, 기본 인덱스 및 keyset 페이지네이션 적용
  - 통합 테스트(간단 2~3 케이스)로 기본 흐름 검증
- 리스크/방어
  - 소유권 체크 미흡(403 반환), 잘못된 날짜/시간 형식 400 반환

Week 3: Chat/AI(Mock) + 캐시/비동기 골격 + 자동 배포
- 범위
  - Chat: POST /chat/threads, POST /chat/threads/{id}/messages (Mock 응답 저장)
  - External: AI 클라이언트 인터페이스만 정의(구현은 나중)
  - Redis 연결, 캐시 키 설계서 작성, @Async 비동기 골격
  - CI/CD: 스테이징 환경 자동 배포 파이프라인 구축
- DoD
  - 메시지 전송 시 Mock 답변 저장 및 조회 가능, Redis 연결 헬스 체크 OK
- 리스크/방어
  - 토큰 상한 정책 미설정(정책 파일로 상한 정의), 중복 요청 멱등키 구조 설계

Week 4: Photo(Stub) + Billing(Mock) + Share + 고급 파이프라인
- 범위
  - Photo: POST /photos/analyze (파일 수신/검증 → 간단 JSON), GET /photos/analysis/{id}
  - Billing: GET /billing/credits, POST /billing/orders, POST /billing/kakaopay/webhook(Mock)
  - Share: POST /share/tokens, GET /share/{token} (만료/범위)
  - CI/CD: Docker 빌드 자동화, 컨테이너 레지스트리 연동
- DoD
  - 업로드 크기/확장자 검증, 주문→웹훅→크레딧 적립 흐름 로그로 확인
- 리스크/방어
  - 웹훅 멱등성키, 서명 검증(초기엔 주석/플래그로 표시), 토큰 만료 처리

Week 5: 배포/관측 최소 구성 + 프로덕션 파이프라인
- 범위
  - Dockerfile 멀티스테이지, docker-compose(Postgres, Redis)
  - Actuator /actuator/health, 기본 메트릭/로그, 단순 알람 훅
  - CI/CD: 프로덕션 배포 파이프라인 구축, Blue-Green 배포 준비
- DoD
  - 로컬 도커 올인원 구동, 헬스체크 OK, 로그/메트릭 수집 확인
- 리스크/방어
  - 프로파일 분리 누락, 포트/네트워크 충돌, 환경 변수 관리 미흡

Week 6: 안전장치/최적화(라이트) + CI/CD 완성
- 범위
  - Rate limiting(간단), Resilience4j CircuitBreaker 기본, 캐시 TTL 정책
  - CI/CD: 모니터링 통합, 알림 설정, 롤백 자동화
  - 문서 보강: 운영 가이드, 장애 대응 플로우, CI/CD 운영 매뉴얼, 비용 모니터링 대시보드 초안
- DoD
  - 과도한 호출 시 제한 동작, 외부 장애 시 폴백 응답, 캐시 만료 정상 동작

## 🤝 팀원간 협업 포인트 및 API 연동

### 핵심 협업 지점
**1. 인증 시스템 (BE-1 → 모든 팀원)**
- JWT 토큰 검증 필터를 모든 API에 적용
- 사용자 ID 추출 유틸리티 함수 공유
- 협업: `@PreAuthorize`, `SecurityContext` 사용법 통일

**2. AI Chat → Recommendation 데이터 파이프라인 (TL → BE-4)**
- 대화 내용 실시간 분석 → 사용자 선호도 추출 (여행 스타일, 예산, 관심사)
- 학습 데이터 생성 → user_preferences 테이블 업데이트
- 선호도 변화 추적 → 개인화 추천 모델 학습 데이터 제공
- 협업: `UserPreferenceData`, `ChatAnalysisResult` 데이터 구조 설계

**3. AI Chat ↔ Trip Planning 생성 연동 (TL ↔ BE-2)**
- AI 채팅 요청 → 여행 계획 자동 생성 → 여행 데이터 저장
- 생성된 계획 피드백 → 대화 컨텍스트 업데이트
- 협업: `TripGenerationRequest`, `ChatToTripMapping` 데이터 구조 설계

**4. Trip Planning → Review System 상태 연동 (BE-2 ↔ BE-3)**
- 여행 완료 상태 API → 후기 작성 가능 상태로 전환
- 여행 완료 이벤트 → 후기 작성 알림 트리거
- 협업: `TripStatus`, 여행 완료 API 설계

**5. Review/Media → Recommendation 학습 데이터 (BE-3 → BE-4)**
- 후기 작성 시 추천 학습 데이터 실시간 업데이트
- 평점, 선호 태그, 미디어 메타데이터 동기화
- 협업: 이벤트 기반 데이터 파이프라인 구축

**6. User Management → All Domains 인증 제공 (BE-1 → 전체)**
- JWT 토큰 검증 필터를 모든 도메인 API에 적용
- 사용자 ID 추출 유틸리티 함수 공유
- 협업: `@PreAuthorize`, `SecurityContext` 사용법 통일

**7. Sharing → Trip Planning 연동 (BE-1 ↔ BE-2)**
- 여행 공유 토큰 생성 → 여행 데이터 읽기 전용 접근
- 공유 권한 검증 → 여행 데이터 조회 API 연동
- 협업: 공유 토큰 검증 미들웨어 공유

### API 연동 상세
```yaml
# Domain별 API 분업 현황

# BE-1: User Management + Sharing (9 APIs)
POST /auth/register, /auth/login, /auth/refresh, /auth/logout
GET /users/profile, PUT /users/profile, POST /users/profile/photos
POST /share/tokens, GET /share/{token}

# TL: AI Chat Domain (8 APIs)
GET /chat/threads, POST /chat/threads
GET /chat/threads/{id}/messages, POST /chat/threads/{id}/messages
POST /chat/threads/{id}/analyze-photo
POST /chat/analyze-preferences/{threadId}
GET /chat/preferences/learning-data
POST /chat/generate-trip-from-chat

# BE-2: Trip Planning Domain (8 APIs)
GET /trips, POST /trips, GET /trips/{id}, PUT /trips/{id}, DELETE /trips/{id}
POST /trips/{id}/schedules, PUT /trips/{id}/schedules/{scheduleId}
POST /trips/{id}/complete

# BE-3: Review System + Media Management (10 APIs)
GET /reviews, POST /reviews, GET /reviews/{id}, PUT /reviews/{id}, DELETE /reviews/{id}
GET /reviews/trip/{tripId}, GET /reviews/user/{userId}
POST /reviews/{id}/moderate
POST /photos/analyze, GET /photos/analysis/{id}

# BE-4: Recommendation + Payment & Billing (10 APIs)
GET /recommendations/destinations, GET /recommendations/activities/{userId}
POST /recommendations/feedback, GET /recommendations/history/{userId}
GET /recommendations/similar-users/{userId}, POST /recommendations/train-model
GET /billing/credits, POST /billing/orders, POST /billing/webhooks, GET /billing/history
```

### 역할별 세부 할 일(초기 1~2주)
**TL**: AI 채팅 + 선호도 학습 엔진 + 프로젝트 기반 구축
- 리포 초기화, 브랜치 규칙, PR 템플릿, CODEOWNERS
- GitHub Actions 워크플로우 (.github/workflows/ci-cd.yml)
- docker-compose.yml(POSTGRES, REDIS), OpenAPI 문서 규칙
- **AI 채팅 시스템**: LLM API 클라이언트, 대화 컨텍스트 관리, 입출력 저장
- **대화 분석 엔진**: 선호도/관심사/예산 패턴 추출, NLP 파싱 로직
- **선호도 학습**: user_preferences 테이블 업데이트, BE-4 추천 학습 데이터 제공
- AI→여행계획 연동 데이터 구조 설계 📋

**BE-1 (사용자 관리 + 인프라/배포 운영)**: 인증 기반 구축
- 주담당: users, user_profile 테이블 + JPA, JWT 발급/검증 필터, SecurityConfig 설정
- 부담당: AWS 배포/인프라(ECR/ECS 또는 EC2+ALB) 설정·운영, CI/CD 파이프라인 운영·모니터링, 보안·시크릿(Secrets Manager/KMS) 관리, 비용·사용량 모니터링, 릴리즈/버전 관리
- `/auth/register`, `/auth/login`, `/users/profile`
- 다른 팀원용 인증 유틸리티 제공 📋

**BE-2 (여행 계획 주담당 + 프론트엔드 총괄)**: 여행 데이터 모델링
- 주담당: trips, schedules, places 테이블 + 인덱스, 날짜/시간 검증, 소유권 검사 AOP
- 부담당: React 프로젝트 초기 설정, 컴포넌트 라이브러리 선정, 프론트엔드 아키텍처 설계, UI/UX 가이드라인 수립
- `/trips` CRUD, `/trips/{id}/schedules`, `/places/*`
- TL과 여행계획 생성 로직 공유, 여행 상태 관리 API 제공 📋

**BE-3 (여행 후기 + 문서관리)**: 경험 관리 시스템
- 주담당: trip_reviews 테이블, 평점/모더레이션 시스템, `/reviews/*` API
- 부담당: Notion 팀 위키 구축, Swagger 문서 표준화, Jira 보드 설정
- TL,BE-2와 여행 완료 상태 연동, 후기 데이터 파이프라인 구축 📋

**BE-4 (사진/결제 + 추천 + QA/테스팅)**: 멀티미디어&추천
- 주담당: photo_analysis, credit_ledger, share_tokens, user_preferences 테이블
- 부담당: 테스트 환경 구축, Jest/Cypress 설정, 테스트 시나리오 작성
- `/photos/*`, `/billing/*`, `/share/*`, `/recommendations/*`
- 추천 알고리즘 라이브러리 선정 📋

## 🎯 기능별 개발 우선순위 및 팀원 협업 타임라인

### Phase 1: MVP 핵심 (Week 1-2)
**BE-1 우선**: 🔐 `UC-01 회원가입/로그인` → `UC-02 프로필 설정`
- 다른 모든 팀원이 인증 토큰 연동 대기 ⏳
- **협업 완료 후** 다른 기능 병렬 개발 가능

### Phase 2: 핵심 여행 기능 (Week 2-3)
**TL + BE-2 협업**: 🗺️ 여행 계획 시스템
- `UC-03 여행 계획 CRUD` (BE-2 주도)
- `UC-04 AI 채팅(Mock)` (TL 주도)
- `UC-05 일정 관리` (BE-2 주도)
- AI 채팅→여행계획 생성 연동 (TL↔BE-2 공동 작업) 🤝
**BE-4**: 📷 `UC-06 사진 분석(Stub)` + `UC-07 크레딧(Mock)`

### Phase 3: 확장 기능 (Week 3-4)  
**BE-3 주도**: 📝 여행 후기 시스템 구축
- `UC-16 여행 후기 작성` (BE-3 주도)
- `UC-17 후기 조회/관리` (BE-3 주도)
- TL,BE-2와 여행 완료 상태 API 연동 필요 🤝

### Phase 4: 고급 기능 (Week 4-6)
**BE-4 주도 + 전체 팀 데이터 제공**: 🎯 개인화 추천 시스템
- `UC-18 개인화 추천` (BE-4 주도)
- `UC-19 추천 피드백` (BE-4 주도) 
- TL,BE-2(여행이력), BE-3(후기데이터) 제공 🤝
- `UC-08 공유 토큰` (BE-4)

정의된 완료 기준(공통 DoD)
- Swagger 스키마 최신화, 샘플 요청/응답 예시 포함
- 예외 응답 규격 준수(code/message/details)
- DB 마이그레이션(Flyway) 포함, 롤백 절차 메모
- 간단 통합 테스트 2~3개(핵심 흐름) 포함
- 로그에 식별 키(traceId/userId) 포함

개발 운영 리듬
- 데일리 15분 스탠드업: 어제/오늘/블로커
- 칸반 보드: Backlog → In Progress → Review → Done, WIP 제한(각자 1~2개)
- 코드리뷰: PR 템플릿 체크리스트, 1명 이상 승인 필수

리스크 및 가드레일
- 비용: 외부 고가 API는 Mock/플래그 → 크레딧 동의 후 실 호출
- 성능: N+1 방지, 캐시 TTL, 페이지네이션 상한
- 보안: 시크릿은 환경 변수/비밀 저장소, 로깅 시 민감정보 마스킹

오늘 당장 시작하기(체크리스트)
- [ ] 리포/브랜치 규칙/PR 템플릿/CODEOWNERS 추가(TL)
- [ ] GitHub Actions 기본 워크플로우 설정(.github/workflows/ci-cd.yml)(TL)
- [ ] Spring Boot 초기 프로젝트 생성 + 기본 패키지 골격(TL)
- [ ] docker-compose(Postgres/Redis) 작성 및 기동(TL)
- [ ] Auth/User 모듈 스캐폴딩 + /auth/register, /auth/login(최소)(BE-1)
- [ ] Trip 엔티티/레포/서비스/컨트롤러 + /trips POST/GET(최소)(BE-2)
- [ ] Chat(Mock) 컨트롤러/서비스 + Redis 연결(헬스 확인)(BE-3)
- [ ] Photo 업로드 Stub + 업로드 제한 설정(BE-4)

산출물 체크
- 문서: 이 로드맵(roadmap.txt), 유스케이스 폴더(docs/usecases/*.md), API 명세(Swagger)
- 코드: 모듈별 디렉토리, 공통 모듈(common/config), 테스트 최소 케이스
- 인프라: docker-compose.yml, .env.example(민감정보 제외)

참고(데이터베이스 최소 테이블)
- users, user_profile, trips, schedules (MVP 필수)
- 선택/Stub: chat_threads, agent_messages, photo_analysis, credit_ledger, share_tokens
- 인덱스: trips(user_id, start_date, end_date), schedules(trip_id, day, start_time)

메모
- 초보자 기준: 복잡도는 단계별로 올린다. Mock/Stub → 실제 구현 순으로 확장
- 한 파일이 길어지면 컨트롤러/서비스/레포/DTO로 반드시 분리(모듈화 우선)



문서/설계/구현 순서(권장 플로우)
- 1) 범위·용어 정리 → 2) 유스케이스 작성 → 3) 엔티티 식별 → 4) ERD 초안 → 5) API 명세(OpenAPI) → 6) DTO/예외 표준화 → 7) 구현 우선순위·담당 배정 → 8) 개발/테스트 → 9) 문서/리뷰 고정
- 산출물 위치 권장
  - docs/usecases/UC-XX.md
  - docs/erd/erd.mmd 또는 docs/erd/erd.md
  - docs/api/openapi.yml

유스케이스 템플릿
```
# UC-XX: [유스케이스 이름]
- 액터: [일반 사용자 | 관리자 | 시스템]
- 목적: [사용자가 얻는 가치 한 줄]
- 우선순위: [High/Medium/Low]
- 사전조건: [인증 여부, 데이터 존재 등]
- 사후조건: [DB/상태 변화, 알림 등]

## 기본 흐름
1) [행동/입력]
2) [시스템 처리]
3) [출력/피드백]

## 대체 흐름(선택)
A1) [분기 조건] → [대체 처리]

## 예외/실패
- [코드/상황]: [메시지/대응]  예) 409 이메일 중복: 사용자에게 중복 안내

## 데이터/엔티티
- 관련 테이블: [users, trips, schedules ...]
- 필수 필드: [email, password, ...]

## API 매핑
- [POST /auth/register], [POST /auth/login] ...

## 성공 기준(DoD)
- [응답 코드/바디], [DB 변경], [로그/이벤트]
```

ERD 템플릿(방법 A: 표 기반)
```
## 테이블: users
| 컬럼           | 타입         | 제약                         | 설명                 | 인덱스                |
|----------------|--------------|------------------------------|----------------------|-----------------------|
| id             | UUID         | PK, default gen_random_uuid()| 사용자 식별자        | PK                    |
| email          | VARCHAR(255) | NOT NULL, UNIQUE             | 이메일               | UNIQUE(email)         |
| password_hash  | VARCHAR(255) | NOT NULL                     | 해시 저장            |                       |
| role           | VARCHAR(50)  | DEFAULT 'user'               | 권한                 |                       |
| credits        | INTEGER      | DEFAULT 0                    | 크레딧               |                       |
| created_at     | TIMESTAMP    | DEFAULT NOW()                | 생성 시각            |                       |

## 테이블: trips
| 컬럼       | 타입      | 제약                   | 설명           | 인덱스                              |
|------------|-----------|------------------------|----------------|-------------------------------------|
| id         | UUID      | PK                     | 여행 계획 ID   | PK                                  |
| user_id    | UUID      | FK → users(id)         | 소유 사용자    | idx(user_id, start_date, end_date)  |
| title      | VARCHAR   | NOT NULL               | 제목           |                                     |
| start_date | DATE      | NOT NULL               | 시작일         |                                     |
| end_date   | DATE      | NOT NULL               | 종료일         |                                     |
| created_at | TIMESTAMP | DEFAULT NOW()          | 생성 시각      |                                     |
```

ERD 템플릿(방법 B: Mermaid 시각화)
```mermaid
erDiagram
  USERS ||--o{ TRIPS : owns
  TRIPS ||--o{ SCHEDULES : has
  USERS {
    UUID id PK
    string email "UNIQUE"
    string password_hash
    string role
    int credits
    timestamp created_at
  }
  TRIPS {
    UUID id PK
    UUID user_id FK
    string title
    date start_date
    date endDate
    timestamp created_at
  }
  SCHEDULES {
    UUID id PK
    UUID trip_id FK
    int day
    time start_time
    time end_time
    UUID place_id
  }
```

API 명세서 템플릿(OpenAPI 3.0)
```
openapi: 3.0.3
info:
  title: Travel Agent API
  version: 0.1.0
  description: |
    MVP 백엔드 API. JWT 인증 사용.
servers:
  - url: http://localhost:8080
    description: Dev

tags:
  - name: Auth
  - name: Users
  - name: Trips

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: "BAD_REQUEST" }
        message: { type: string, example: "Invalid input" }
        details: { type: object, additionalProperties: true }
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
    Trip:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        createdAt: { type: string, format: date-time }
    CreateTripRequest:
      type: object
      required: [title, startDate, endDate]
      properties:
        title: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }

paths:
  /auth/register:
    post:
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RegisterRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthResponse" }
        "409":
          description: Duplicate email
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /auth/login:
    post:
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthResponse" }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
  /trips:
    get:
      tags: [Trips]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: size
          schema: { type: integer, default: 20, maximum: 100 }
        - in: query
          name: cursor
          schema: { type: string, description: "keyset 기반 커서" }
      responses:
        "200":
          description: List of trips
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Trip" }
                  nextCursor: { type: string, nullable: true }
    post:
      tags: [Trips]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateTripRequest" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Trip" }
        "400":
          description: Validation error (e.g., startDate > endDate)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
```

담당 배정(문서/설계 착수)
- TL: 문서 스캐폴딩 생성(디렉터리/템플릿 배포), OpenAPI 뼈대/규칙 정의, 예외 표준 합의
- BE-1: UC-01/02 문서 작성 → Auth/User ERD·API 반영
- BE-2: UC-03 문서 작성 → Trip/Schedule ERD·API 반영
- BE-3: UC-04 문서 작성 → Chat(Mock)/Redis 키 정책 문서
- BE-4: UC-05/06/07 문서 작성 → Photo/Billing/Share API 반영