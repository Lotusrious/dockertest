팀장 운영 플랜(Lead Playbook) — Travel Agent 백엔드
-------------------------------------------------------------------------------

요일·시간대 운영 루틴(운영시간 09:00–17:50)
- 공통 규칙: 매 시간 블록의 50분~정시(XX:50–XX:00)는 휴식. 점심 13:00–14:00.
- 09:00–09:20 커피챗(라이트 싱크, 심리적 안전·컨디션 체크)
- 09:20–09:35 데일리 스탠드업(어제/오늘/블로커)
- 09:35–09:50 스프린트 포커스/트리아지(우선순위·재할당·범위 조절)
- 09:50–10:00 휴식
- 10:00–10:50 개발 블록 A: 모듈 개발/블로커 해소(페어/핸즈온)
- 10:50–11:00 휴식
- 11:00–11:50 개발 블록 B: 모듈 개발(컨트롤러/서비스/레포)
- 11:50–12:00 휴식
- 12:00–12:50 개발 블록 C: 단위 테스트 최소/핫픽스
- 12:50–13:00 휴식
- 13:00–14:00 점심
- 14:00–14:20 팀 페어링/가이드(테스트/에러정책/리팩터)
- 14:20–14:50 개발 블록 D
- 14:50–15:00 휴식
- 15:00–15:50 개발 블록 E
- 15:50–16:00 휴식
- 16:00–16:50 개발 블록 F(핫 이슈·버그픽스·레질리언스 작업)
- 16:50–17:00 휴식
- 17:00–17:50 마감 블록: 코드리뷰 큐 비우기, 문서/CHANGELOG/ADR 정리, 내일 작업 계획(EOD 10분 포함)

-------------------------------------------------------------------------------
회의/커뮤니케이션
- 스탠드업(매일 09:20, 15분): 어제/오늘/블로커
- 데모(금 10:00, 30분): 이번 주 DoD 검증
- 회고(금 14:00, 30분): 잘한 점/개선/액션
- 응답 SLA: 업무시간 내 이슈/PR 코멘트 2h 이내 1차 응답

-------------------------------------------------------------------------------
목표
- roadmap.txt 기준으로 6주 MVP를 시간·기능 단위로 실행 관리
- 팀을 막힘없이 흐르게 만들기: 우선순위/품질/속도 균형
- 문서 우선·모듈 우선·테스트 최소화(핵심 흐름) 철저

-------------------------------------------------------------------------------
주간 운영 플랜(요약)
- Week 1: 뼈대/보안/Auth + 문서 체계·도커·Swagger
- Week 2: Trip/Schedule CRUD + 예외/응답 표준 + 간단 통합 테스트
- Week 3: Chat(Mock) + Redis + 비동기 골격 + 캐시 키 정책
- Week 4: Photo(Stub) + Billing(Mock) + Share + 멱등/토큰 만료 처리
- Week 5: 배포/관측 최소(Actuator/로그/메트릭) + 도커 올인원
- Week 6: 안전장치(Rate Limit/CircuitBreaker) + 문서/데모·회고/Backlog 정리

-------------------------------------------------------------------------------
도구/프로세스 운영(Jira · Swagger · GitHub)
- Jira: Backlog → Selected → In Progress → In Review → QA → Done
  - 스프린트 1주, 금요일 데모/회고. WIP 제한: In Progress(개인≤2), In Review(팀≤5)
  - 브랜치: feature/JIRA-123-short, fix/JIRA-234-bug. 커밋: JIRA-123: 요약
  - Smart Commit 예: JIRA-123 #comment 작업내용 #time 1h #transition In Review
- Swagger(OpenAPI): docs/api/openapi.yml를 소스 오브 트루스로 관리
  - 엔드포인트 변경 시 PR에 스키마/예시 동반, 머지 후 Swagger UI 검증
  - ErrorResponse(code/message/details)·cursor 페이지네이션 규칙 준수
- GitHub: 이슈 템플릿(버그/기능), PR 템플릿, CODEOWNERS 적용
  - PR 체크리스트 필수, 리뷰 1인 이상, 변경 라인 400↓ 원칙
  - 릴리즈 노트: 문서 담당이 주 2회 변경 요약 업데이트

-------------------------------------------------------------------------------
역할 요약(팀장)
- 일정/우선순위: 칸반 유지, 스프린트 목표·WIP 제한 관리
- 품질/리뷰: PR 규칙/DoD 지키게 하고, 코드리뷰 SLA 2h
- CI/CD 관리: GitHub Actions 파이프라인 구축/운영, 빌드 실패 모니터링, 배포 승인
- **AI 채팅 시스템 개발**: LLM API 통합, 대화 컨텍스트 관리, 채팅 입출력 저장
- **대화 분석 엔진 개발**: 실시간 선호도/관심사/예산패턴 추출, NLP 파싱 로직
- **선호도 학습 데이터 관리**: 분석 결과 → user_preferences 저장, BE-4 추천 학습 데이터 제공
- **여행계획 연동 관리**: AI 채팅→여행계획 자동 생성 (BE-2와 협업)
- **팀원간 API 연동 관리**: 인증(BE-1), 여행데이터(BE-2), 후기(BE-3), 추천(BE-4) 간 협업 조율
- **데이터 파이프라인 관리**: 채팅분석→선호도학습→추천데이터 흐름, 실시간 동기화 품질 관리
- 문서/표준: 템플릿 배포·유지(유스케이스/ERD/OpenAPI/PR/Issue)
- 인프라/도구: docker-compose, CI/CD 파이프라인, Swagger 노출, 보안 기본
- 리스크/커뮤니케이션: 블로커 제거, 의사결정 로그 유지, 데모/회고 진행

-------------------------------------------------------------------------------
역할 배분(개발/문서)
- 개발: 5인 모듈 분담 - TL(AI채팅+여행계획지원), BE-1(인증), BE-2(여행계획주담당), BE-3(후기), BE-4(사진/결제+추천)
- 문서: 각자 자신이 개발한 API의 OpenAPI/샘플 응답/에러 케이스 문서화 의무
- 문서 관리 담당(1명 지정):
  - OpenAPI 일관성/스타일 가이드 준수 점검, 문서 PR 머지 권한
  - Swagger 변경분 주 2회 릴리즈 노트 반영(CHANGELOG, docs/api)
  - 문서 빌드/링크 체크 CI 관리

-------------------------------------------------------------------------------
Week 1 — 팀장 상세 일정(예시)
Day 1(월)
- 09:30 킥오프/목표확정(roadmap.txt 하이라이트)
- 10:15 리포 초기화/브랜치 규칙/PR 템플릿/CODEOWNERS 추가
- 11:30 GitHub Actions 워크플로우 기본 설정 (.github/workflows/ci-cd.yml)
- 13:00 docs/ 디렉토리·템플릿 배포(usecases/erd/api)
- 14:00 docker-compose(Postgres/Redis) 초안 배포, .env.example 작성
- 16:00 Spring Boot 스켈레톤 생성 가이드 공유, 패키지 구조 합의

Day 2(화)
- 09:45 OpenAPI 스켈레톤 초안 생성/배포
- 10:30 GlobalExceptionHandler/에러 응답 규격 합의
- 12:00 CI/CD 파이프라인 첫 실행 및 검증
- 13:30 Auth/User 작업 착수 점검(BE-1 페어)
- 15:30 Swagger UI 노출/보안 기본(CORS/프로파일) 점검

Day 3(수)
- 10:15 DB 마이그레이션 방향(Flyway) 결정/샘플 스크립트
- 13:00 User/Profile 최소 스키마 리뷰/수정
- 15:00 로그인/회원가입 플로우 E2E 수동 검증(포스트맨 시나리오)

Day 4(목)
- 10:15 Auth 코드리뷰/테스트 케이스(2~3개) 권고
- 14:00 보안 점검(비번 정책/JWT 만료/재발급 흐름 문서)

Day 5(금)
- 10:00 주간 데모(회원가입/로그인/프로필)
- 14:00 회고/개선 액션 등록, Week 2 작업 분배 확정

-------------------------------------------------------------------------------
Week 2 — 팀장 포인트
- Trip/Schedule ERD·유효성 정책 합의(날짜/겹침/소유권)
- 공통 응답·예외 표준 강제(샘플 응답/에러 카탈로그)
- CI/CD 코드 품질 검사 통합 (SonarQube/CheckStyle), 자동 테스트 실행 확인
- 간단 통합 테스트 2~3개 요구, 페이지네이션 정책 적용

-------------------------------------------------------------------------------
Week 3 — 팀장 포인트  
- Chat(Mock) 범위 통제(실 모델 호출 금지, 인터페이스만)
- **후기 시스템 기반 구축**: BE-3과 여행 후기 테이블 설계 검토, 평점/리뷰 검증 정책
- **BE-2↔BE-3 API 연동 관리**: 여행 완료 상태 API 설계, 후기 작성 권한 체크 로직
- Redis 연결·키 네임스페이스 문서화, @Async 예외 처리 가이드
- CI/CD 스테이징 환경 자동 배포 파이프라인 구축 및 검증
- 토큰 상한 정책 파일 도입(엔드포인트별 상한)

-------------------------------------------------------------------------------
Week 4 — 팀장 포인트
- 업로드 제한(크기/확장자) 및 보안 점검, 멱등 웹훅 키 표준
- **후기 시스템 고도화**: 후기 검색/필터링 기능, 어뷰징 방지 정책, 모더레이션 도구
- **추천 시스템 기반 준비**: BE-4와 추천 알고리즘 라이브러리 선정, 학습 데이터 수집 전략
- CI/CD Docker 빌드 자동화, 컨테이너 레지스트리 연동 및 인증 설정
- 공유 토큰 만료/스코프 정책 정의, 감사 로그 체크

-------------------------------------------------------------------------------
Week 5 — 팀장 포인트
- 도커 올인원 부팅 검증, Actuator 헬스체크 ALB 경로 합의
- **개인화 추천 시스템 구축**: BE-4 주도로 추천 엔진 구현, 학습 데이터 파이프라인 검증
- **전체 팀 데이터 제공 조율**: BE-2(여행이력), BE-3(후기데이터) → BE-4(추천학습) 데이터 흐름 관리
- CI/CD 프로덕션 배포 파이프라인 구축, Blue-Green 배포 전략 준비
- 로그/메트릭 최소 세트 합의(traceId/userId 포함)

-------------------------------------------------------------------------------
Week 6 — 팀장 포인트
- Rate limiting·CircuitBreaker 기본값 배포
- **추천 시스템 성능 검증**: 추천 정확도 측정, A/B 테스트 준비, 추천 API 성능 최적화
- **후기↔추천 파이프라인 완성**: 실시간 데이터 동기화, 추천 피드백 루프 완성
- CI/CD 모니터링 통합, 알림 설정, 롤백 자동화 테스트
- 문서·Swagger 동기화/CI/CD 운영 매뉴얼/추천 시스템 가이드 작성/최종 데모·회고, Backlog 정리

-------------------------------------------------------------------------------
기능별 팀장 체크리스트

**Auth/User (BE-1)**
- 비밀번호 정책/이메일 중복/토큰 만료 대비 테스트 시나리오
- `/auth/register`, `/auth/login` 성공·실패 케이스 샘플 응답 검토
- **다른 팀원용 인증 유틸리티 제공 확인** (SecurityContext, @PreAuthorize 가이드)

**Trip/Schedule (BE-2)**
- 날짜 역전/겹침 검증 함수 존재, 소유권 검사(403) 강제
- 페이지네이션 상한/정렬 화이트리스트 확인
- **여행 완료 상태 API 제공 확인** (`/trips/{id}/complete`, TripStatus 관리)

**TL (AI Chat + 선호도 학습)**: AI 채팅 시스템 및 학습 데이터 엔진
- **AI 채팅 시스템**: LLM API 통합, 대화 컨텍스트 관리, 채팅 입출력 저장
- **대화 분석 엔진**: 실시간 선호도/관심사/예산패턴 추출, NLP 파싱 로직 품질 관리
- **선호도 학습 데이터**: 분석→user_preferences 저장, BE-4 추천 모델 학습 데이터 제공
- **BE-2와 여행계획 연동**: AI 채팅→여행계획 자동 생성 데이터 구조 설계

**BE-1 (User Management + Sharing + 인프라/배포 운영)**
- **User Management Domain (7 APIs)**: 비밀번호 정책/이메일 중복/토큰 만료 대비 테스트 시나리오
- **Sharing Domain (2 APIs)**: 여행 공유 토큰 생성/관리, 공유 권한 제어, 토큰 만료 처리
- **인프라/배포 운영**: AWS 배포(ECR/ECS 또는 EC2+ALB), CI/CD 파이프라인 운영·모니터링, 보안·시크릿 관리(Secrets Manager/KMS), 비용·사용량 모니터링, 릴리즈 관리

**BE-2 (Trip Planning + 프론트엔드 총괄)**
- **Trip Planning Domain (8 APIs)**: 날짜 역전/겹침 검증 함수 존재, 소유권 검사(403) 강제
- **여행 완료 상태 API**: `/trips/{id}/complete` 제공, TripStatus 관리, BE-3(후기)와 연동
- **프론트엔드 총괄**: React 프로젝트 초기 설정, 컴포넌트 라이브러리 선정, 프론트엔드 아키텍처, UI/UX 가이드라인

**BE-3 (Review System + Media Management + 문서관리)**
- **Review System Domain (8 APIs)**: 평점 검증, 리뷰 텍스트 길이 제한, 어뷰징 탐지
- **Media Management Domain (2 APIs)**: 사진 업로드/분석, 파일 관리, 미디어 메타데이터 처리
- **문서 통합 관리**: Notion 위키 업데이트, Swagger 문서 일관성, Jira 스프린트 운영

**BE-4 (Recommendation + Payment & Billing + QA/테스팅)**
- **Recommendation Domain (6 APIs)**: 추천 응답 속도(<500ms), 정확도 지표, 콜드 스타트 대응
- **Payment & Billing Domain (4 APIs)**: 크레딧 관리, 결제 연동, 웹훅 처리, 거래 이력 관리
- **QA 품질 관리**: E2E 테스트 시나리오, 버그 트래킹, 품질 게이트 운영

-------------------------------------------------------------------------------
품질 게이트(머지 전 필수)
- GitHub Actions CI/CD 파이프라인 전체 단계 통과 (빌드→테스트→린트→보안 스캔)
- 최소 테스트(핵심 2~3개) + 자동 테스트 커버리지 유지
- Swagger(OpenAPI) 변경 반영/예시 포함
- 예외 응답 규격(code/message/details) 준수
- 리뷰 1인 이상 승인, 변경 라인 400 이하 원칙

-------------------------------------------------------------------------------
리스크·에스컬레이션 가이드
- 2h 이상 블로커: 즉시 이슈화→우선순위 재조정→스코프 축소/재할당
- 외부 의존성 문제: Mock/Feature flag로 전환, 일정 보호
- 비용 리스크: 고가 API는 사전 크레딧 동의/모니터링 대시보드로 관리

-------------------------------------------------------------------------------
산출물 체크(주차별)
- Week 1: 리포·도커·템플릿·Auth 최소 + OpenAPI/Swagger
- Week 2: Trip/Schedule CRUD + 예외/응답 표준 + 테스트 최소
- Week 3: Chat(Mock) + Redis 키 정책 + @Async 골격
- Week 4: Photo/Billing/Share Stub/Mock + 멱등·만료 정책
- Week 5: 도커 올인원 + Actuator/로그/메트릭
- Week 6: RateLimit/CircuitBreaker + 문서 마감/데모/회고

-------------------------------------------------------------------------------
데일리 체크리스트(팀장)
- 칸반 정리(WIP, 우선순위, 대기 상태 제거)
- CI/CD 파이프라인 상태 모니터링 (빌드 실패, 배포 상태)
- 블로커 현황/해소 계획 점검
- PR/코드리뷰 대기열 비우기
- Swagger 변경점 리뷰/문서 동기화
- 테스트 케이스/샘플 응답 최신화

-------------------------------------------------------------------------------
의사결정 로그(권장)
- docs/decisions/ADR-YYYYMMDD-NN.md (주제, 대안, 결정, 이유, 영향)

-------------------------------------------------------------------------------
부록: 파일/디렉터리 기본
- docs/usecases/UC-XX.md
- docs/erd/erd.mmd
- docs/api/openapi.yml
- docker-compose.yml, .env.example
- .github/PULL_REQUEST_TEMPLATE.md, ISSUE_TEMPLATE.md, CODEOWNERS
